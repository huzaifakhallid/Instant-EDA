import pandas as pd
from plotly.graph_objects import Figure
from datetime import datetime

# --- 1. CSS Stylesheet ---
REPORT_CSS = """
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');

    body { 
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; 
        margin: 0; 
        padding: 0; 
        background-color: #f4f7fa;
        color: #334155;
    }
    .container { max-width: 1400px; margin: 25px auto; padding: 30px; }
    h1, h2, h3 { color: #1e293b; font-weight: 700; }
    h1 { text-align: center; font-size: 2.5em; margin-bottom: 5px; }
    .subtitle { text-align: center; font-size: 1.1em; color: #64748b; margin-bottom: 40px; }
    .section { background-color: #ffffff; padding: 25px; margin-bottom: 30px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.05); border: 1px solid #e2e8f0; }
    table { width: 100%; border-collapse: collapse; }
    th, td { padding: 14px; border-bottom: 1px solid #e2e8f0; text-align: left; }
    th { background-color: #f8fafc; color: #475569; font-weight: 600; }
    tr:hover { background-color: #f8fafc; }
    .metric-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; }
    .metric { background-color: #f8fafc; padding: 20px; border-radius: 8px; text-align: center; }
    .metric h3 { margin: 0 0 10px 0; color: #475569; font-size: 0.9em; font-weight: 600; text-transform: uppercase; }
    .metric p { margin: 0; font-size: 2em; font-weight: 700; color: #0f172a;}
    .alert { padding: 15px; margin-bottom: 20px; border-radius: 8px; border-left: 5px solid; }
    .alert-warning { background-color: #fffbeb; border-color: #fbbf24; color: #92400e; }
    .alert-info { background-color: #eff6ff; border-color: #60a5fa; color: #1e40af; }
    .plot-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }
    .plot-grid .plotly-graph-div { margin-bottom: 20px; }
    .ml-suggestion { border-left: 3px solid #10b981; margin-bottom: 20px; padding-left: 15px; }
    .code { background-color: #1e293b; color: #e2e8f0; padding: 15px; border-radius: 8px; white-space: pre-wrap; font-family: 'Courier New', Courier, monospace; word-wrap: break-word; font-size: 0.9em; }
    .footer { text-align: center; padding: 20px; margin-top: 40px; font-size: 0.9em; color: #94a3b8; }
    a { color: #2563eb; text-decoration: none; }
    a:hover { text-decoration: underline; }
</style>
"""

# --- 2. Modular HTML Generation Functions ---

def _generate_ml_suggestions_html(ml_suggestions: dict) -> str:
    html = "<div class='section'><h2>Machine Learning Suggestions</h2>"
    html += "<p>These are heuristic-based suggestions. Always validate with domain knowledge.</p>"
    for col, details in ml_suggestions.items():
        html += f"<div class='ml-suggestion'>"
        html += f"<h3>{col} <span style='font-size:0.8em; color:#64748b;'> (Identified as: {details.get('role', 'Unknown')})</span></h3>"
        html += f"<p><strong>Suggestion:</strong> {details.get('suggestion', 'N/A')}</p>"
        html += f"<div class='code'><pre><code>{details.get('code', '# N/A')}</code></pre></div>"
        html += f"</div>"
    html += "</div>"
    return html
# --- 3. Main Public Function ---

def generate_html_report(
    profile_info: dict,
    column_summary: pd.DataFrame,
    health_report: dict,
    outlier_report: dict,
    univariate_figs: dict,
    correlation_fig: Figure,
    ml_suggestions: dict, 
    watermark_user: str = "huzaifakhallid"
) -> str:
    """
    Generates a self-contained, comprehensive, and beautifully styled HTML report.
    """
    
    # --- Assemble the body from modular components ---
    body_html = f"""
    <div class='container'>
        <h1>InstantEDA Analysis Report</h1>
        <p class='subtitle'>Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        
        {_generate_profile_html(profile_info)}
        {_generate_alerts_html(health_report, outlier_report)}
        
        <div class='section'>
            <h2>Column-wise Analysis</h2>
            {column_summary.to_html(classes='table table-striped', border=0)}
        </div>
        
        {_generate_univariate_plots_html(univariate_figs)}
        
        <div class='section'>
            <h2>Correlation Heatmap</h2>
            {correlation_fig.to_html(full_html=False, include_plotlyjs='cdn')}
        </div>
        
        {_generate_ml_suggestions_html(ml_suggestions)} 
        
        <div class='footer'>
            Generated by InstantEDA | Created by <a href='https://github.com/{watermark_user}' target='_blank'>{watermark_user}</a>
        </div>
    </div>
    """
    
    # --- Combine Head and Body for the final HTML ---
    final_html = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>InstantEDA Report</title>
        {REPORT_CSS}
    </head>
    <body>
        {body_html}
    </body>
    </html>
    """
    return final_html

def _generate_profile_html(profile_info: dict) -> str:
    metrics_html = ""
    for key, value in profile_info.items():
        metrics_html += f"<div class='metric'><h3>{key}</h3><p>{value}</p></div>"
    return f"<div class='section'><h2>Data Profile</h2><div class='metric-grid'>{metrics_html}</div></div>"

def _generate_alerts_html(health_report: dict, outlier_report: dict) -> str:
    html = "<div class='section'><h2>Alerts & Outliers</h2>"
    warnings_dict = {"High Missing Values (>50%)": health_report.get('high_missing_values', []), "Constant Columns": health_report.get('constant_columns', [])}
    info_dict = {"High Cardinality (Potential IDs)": health_report.get('high_cardinality_columns', [])}
    html += _format_warnings(warnings_dict, "Data Health Warnings", "warning")
    html += _format_warnings(info_dict, "", "info")
    html += "<h3>Outlier Report (IQR Method)</h3>"
    if not outlier_report:
        html += "<p>No significant outliers were detected.</p>"
    else:
        html += "<table><thead><tr><th>Column</th><th>Outlier Count</th><th>Outlier %</th><th>Sample Outliers</th></tr></thead><tbody>"
        for col, details in outlier_report.items():
            html += f"<tr><td>{col}</td><td>{details['count']}</td><td>{details['percentage']}</td><td>{str(details['sample_values'])}</td></tr>"
        html += "</tbody></table>"
    html += "</div>"
    return html

def _generate_univariate_plots_html(univariate_figs: dict) -> str:
    plots_html = ""
    for col_name, fig in univariate_figs.items():
        fig_html = fig.to_html(full_html=False, include_plotlyjs='cdn', default_height='450px')
        plots_html += f"<div><h3>{col_name}</h3>{fig_html}</div>"
    return f"<div class='section'><h2>Univariate Analysis</h2><div class='plot-grid'>{plots_html}</div></div>"

def _format_warnings(report_dict: dict, title: str, alert_type: str = "warning") -> str:
    all_items = [item for sublist in report_dict.values() for item in sublist if item]
    if not all_items: return ""
    html = f"<h3>{title}</h3>" if title else ""
    items_html = ""
    for category, items in report_dict.items():
        if items:
            category_title = category.replace('_', ' ').title()
            if isinstance(items[0], tuple): items_str = ', '.join([f'{col} ({pct})' for col, pct in items])
            else: items_str = ', '.join(map(str, items))
            items_html += f"<li><strong>{category_title}:</strong> {items_str}</li>"
    return html + f"<div class='alert alert-{alert_type}'><ul>{items_html}</ul></div>"